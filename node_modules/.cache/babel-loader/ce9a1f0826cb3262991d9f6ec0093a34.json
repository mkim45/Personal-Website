{"ast":null,"code":"exports.add = add;\nexports.addFromFront = addFromFront;\nexports.remove = remove;\nexports.has = has;\nexports.eq = eq;\nexports.lte = lte;\nexports.lt = lt;\nexports.gte = gte;\nexports.gt = gt;\nexports.nearest = nearest;\n\nfunction defaultCmp(a, b) {\n  if (a === b) return 0;\n  return a < b ? -1 : 1;\n}\n\nfunction add(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var top = list.push(value) - 1;\n\n  while (top) {\n    if (cmp(list[top - 1], value) < 0) return;\n    list[top] = list[top - 1];\n    list[top - 1] = value;\n    top--;\n  }\n}\n\nfunction addFromFront(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var top = list.unshift(value) - 1;\n\n  for (var i = 0; i < top; i++) {\n    if (cmp(value, list[i + 1]) < 0) return;\n    list[i] = list[i + 1];\n    list[i + 1] = value;\n  }\n}\n\nfunction lte(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var i = indexOf(list, value, cmp);\n  if (i === -1) return -1;\n\n  for (; i >= 0; i--) {\n    var c = cmp(list[i], value);\n    if (c <= 0) return i;\n  }\n\n  return -1;\n}\n\nfunction lt(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var i = indexOf(list, value, cmp);\n  if (i === -1) return -1;\n\n  for (; i >= 0; i--) {\n    var c = cmp(list[i], value);\n    if (c < 0) return i;\n  }\n\n  return -1;\n}\n\nfunction gte(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var i = indexOf(list, value, cmp);\n  if (i === -1) return -1;\n\n  for (; i < list.length; i++) {\n    var c = cmp(list[i], value);\n    if (c >= 0) return i;\n  }\n\n  return -1;\n}\n\nfunction gt(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var i = indexOf(list, value, cmp);\n  if (i === -1) return -1;\n\n  for (; i < list.length; i++) {\n    var c = cmp(list[i], value);\n    if (c > 0) return i;\n  }\n\n  return -1;\n}\n\nfunction eq(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var i = indexOf(list, value, cmp);\n  if (i === -1) return -1;\n  return cmp(list[i], value) === 0 ? i : -1;\n}\n\nfunction nearest(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var len = list.length;\n  var top = len - 1;\n  var btm = 0;\n  var mid = -1;\n  var trending = 1; // 0 = down, 2 = up\n\n  while (top >= btm && btm >= 0 && top < len) {\n    mid = Math.floor((top + btm) / 2);\n    var c = cmp(list[mid], value);\n    if (c === 0) return mid;\n\n    if (c >= 0) {\n      if (trending === 1) trending = 0;else if (trending === 2) {\n        if (Math.abs(list[mid] - value) > Math.abs(list[mid - 1] - value)) return mid - 1;\n        return mid;\n      }\n      top = mid - 1;\n    } else {\n      if (trending === 1) trending = 2;else if (trending === 0) return mid;\n      btm = mid + 1;\n    }\n  }\n\n  return mid;\n}\n\nfunction indexOf(list, value, cmp) {\n  if (!cmp) cmp = defaultCmp;\n  var len = list.length;\n  var top = len - 1;\n  var btm = 0;\n  var mid = -1;\n\n  while (top >= btm && btm >= 0 && top < len) {\n    mid = Math.floor((top + btm) / 2);\n    var c = cmp(list[mid], value);\n    if (c === 0) return mid;\n\n    if (c >= 0) {\n      top = mid - 1;\n    } else {\n      btm = mid + 1;\n    }\n  }\n\n  return mid;\n}\n\nfunction has(list, value, cmp) {\n  return eq(list, value, cmp) > -1;\n}\n\nfunction remove(list, value, cmp) {\n  var i = eq(list, value, cmp);\n  if (i === -1) return false;\n  list.splice(i, 1);\n  return true;\n}","map":null,"metadata":{},"sourceType":"script"}