{"ast":null,"code":"'use strict';\n\nvar luxon = require('luxon');\n\nCronDate.prototype.addYear = function () {\n  this._date = this._date.plus({\n    years: 1\n  });\n};\n\nCronDate.prototype.addMonth = function () {\n  this._date = this._date.plus({\n    months: 1\n  }).startOf('month');\n};\n\nCronDate.prototype.addDay = function () {\n  this._date = this._date.plus({\n    days: 1\n  }).startOf('day');\n};\n\nCronDate.prototype.addHour = function () {\n  var prev = this._date;\n  this._date = this._date.plus({\n    hours: 1\n  }).startOf('hour');\n\n  if (this._date <= prev) {\n    this._date = this._date.plus({\n      hours: 1\n    });\n  }\n};\n\nCronDate.prototype.addMinute = function () {\n  var prev = this._date;\n  this._date = this._date.plus({\n    minutes: 1\n  }).startOf('minute');\n\n  if (this._date < prev) {\n    this._date = this._date.plus({\n      hours: 1\n    });\n  }\n};\n\nCronDate.prototype.addSecond = function () {\n  var prev = this._date;\n  this._date = this._date.plus({\n    seconds: 1\n  }).startOf('second');\n\n  if (this._date < prev) {\n    this._date = this._date.plus({\n      hours: 1\n    });\n  }\n};\n\nCronDate.prototype.subtractYear = function () {\n  this._date = this._date.minus({\n    years: 1\n  });\n};\n\nCronDate.prototype.subtractMonth = function () {\n  this._date = this._date.minus({\n    months: 1\n  }).endOf('month').startOf('second');\n};\n\nCronDate.prototype.subtractDay = function () {\n  this._date = this._date.minus({\n    days: 1\n  }).endOf('day').startOf('second');\n};\n\nCronDate.prototype.subtractHour = function () {\n  var prev = this._date;\n  this._date = this._date.minus({\n    hours: 1\n  }).endOf('hour').startOf('second');\n\n  if (this._date >= prev) {\n    this._date = this._date.minus({\n      hours: 1\n    });\n  }\n};\n\nCronDate.prototype.subtractMinute = function () {\n  var prev = this._date;\n  this._date = this._date.minus({\n    minutes: 1\n  }).endOf('minute').startOf('second');\n\n  if (this._date > prev) {\n    this._date = this._date.minus({\n      hours: 1\n    });\n  }\n};\n\nCronDate.prototype.subtractSecond = function () {\n  var prev = this._date;\n  this._date = this._date.minus({\n    seconds: 1\n  }).startOf('second');\n\n  if (this._date > prev) {\n    this._date = this._date.minus({\n      hours: 1\n    });\n  }\n};\n\nCronDate.prototype.getDate = function () {\n  return this._date.day;\n};\n\nCronDate.prototype.getFullYear = function () {\n  return this._date.year;\n};\n\nCronDate.prototype.getDay = function () {\n  var weekday = this._date.weekday;\n  return weekday == 7 ? 0 : weekday;\n};\n\nCronDate.prototype.getMonth = function () {\n  return this._date.month - 1;\n};\n\nCronDate.prototype.getHours = function () {\n  return this._date.hour;\n};\n\nCronDate.prototype.getMinutes = function () {\n  return this._date.minute;\n};\n\nCronDate.prototype.getSeconds = function () {\n  return this._date.second;\n};\n\nCronDate.prototype.getMilliseconds = function () {\n  return this._date.millisecond;\n};\n\nCronDate.prototype.getTime = function () {\n  return this._date.valueOf();\n};\n\nCronDate.prototype.getUTCDate = function () {\n  return this._getUTC().day;\n};\n\nCronDate.prototype.getUTCFullYear = function () {\n  return this._getUTC().year;\n};\n\nCronDate.prototype.getUTCDay = function () {\n  var weekday = this._getUTC().weekday;\n\n  return weekday == 7 ? 0 : weekday;\n};\n\nCronDate.prototype.getUTCMonth = function () {\n  return this._getUTC().month - 1;\n};\n\nCronDate.prototype.getUTCHours = function () {\n  return this._getUTC().hour;\n};\n\nCronDate.prototype.getUTCMinutes = function () {\n  return this._getUTC().minute;\n};\n\nCronDate.prototype.getUTCSeconds = function () {\n  return this._getUTC().second;\n};\n\nCronDate.prototype.toISOString = function () {\n  return this._date.toUTC().toISO();\n};\n\nCronDate.prototype.toJSON = function () {\n  return this._date.toJSON();\n};\n\nCronDate.prototype.setDate = function (d) {\n  this._date = this._date.set({\n    day: d\n  });\n};\n\nCronDate.prototype.setFullYear = function (y) {\n  this._date = this._date.set({\n    year: y\n  });\n};\n\nCronDate.prototype.setDay = function (d) {\n  this._date = this._date.set({\n    weekday: d\n  });\n};\n\nCronDate.prototype.setMonth = function (m) {\n  this._date = this._date.set({\n    month: m + 1\n  });\n};\n\nCronDate.prototype.setHours = function (h) {\n  this._date = this._date.set({\n    hour: h\n  });\n};\n\nCronDate.prototype.setMinutes = function (m) {\n  this._date = this._date.set({\n    minute: m\n  });\n};\n\nCronDate.prototype.setSeconds = function (s) {\n  this._date = this._date.set({\n    second: s\n  });\n};\n\nCronDate.prototype.setMilliseconds = function (s) {\n  this._date = this._date.set({\n    millisecond: s\n  });\n};\n\nCronDate.prototype._getUTC = function () {\n  return this._date.toUTC();\n};\n\nCronDate.prototype.toString = function () {\n  return this.toDate().toString();\n};\n\nCronDate.prototype.toDate = function () {\n  return this._date.toJSDate();\n};\n\nCronDate.prototype.isLastDayOfMonth = function () {\n  //next day\n  var newDate = this._date.plus({\n    days: 1\n  }).startOf('day');\n\n  return this._date.month !== newDate.month;\n};\n/**\n * Returns true when the current weekday is the last occurrence of this weekday\n * for the present month.\n */\n\n\nCronDate.prototype.isLastWeekdayOfMonth = function () {\n  // Check this by adding 7 days to the current date and seeing if it's\n  // a different month\n  var newDate = this._date.plus({\n    days: 7\n  }).startOf('day');\n\n  return this._date.month !== newDate.month;\n};\n\nfunction CronDate(timestamp, tz) {\n  var dateOpts = {\n    zone: tz\n  };\n\n  if (!timestamp) {\n    this._date = luxon.DateTime.local();\n  } else if (timestamp instanceof CronDate) {\n    this._date = timestamp._date;\n  } else if (timestamp instanceof Date) {\n    this._date = luxon.DateTime.fromJSDate(timestamp, dateOpts);\n  } else if (typeof timestamp === 'number') {\n    this._date = luxon.DateTime.fromMillis(timestamp, dateOpts);\n  } else if (typeof timestamp === 'string') {\n    this._date = luxon.DateTime.fromISO(timestamp, dateOpts);\n    this._date.isValid || (this._date = luxon.DateTime.fromRFC2822(timestamp, dateOpts));\n    this._date.isValid || (this._date = luxon.DateTime.fromSQL(timestamp, dateOpts)); // RFC2822-like format without the required timezone offset (used in tests)\n\n    this._date.isValid || (this._date = luxon.DateTime.fromFormat(timestamp, 'EEE, d MMM yyyy HH:mm:ss', dateOpts));\n  }\n\n  if (!this._date || !this._date.isValid) {\n    throw new Error('CronDate: unhandled timestamp: ' + JSON.stringify(timestamp));\n  }\n\n  if (tz && tz !== this._date.zoneName) {\n    this._date = this._date.setZone(tz);\n  }\n}\n\nmodule.exports = CronDate;","map":null,"metadata":{},"sourceType":"script"}