{"ast":null,"code":"var TIMEOUT_MAX = 2147483647; // 2^31-1\n\nexports.setTimeout = function (listener, after) {\n  return new Timeout(listener, after);\n};\n\nexports.setInterval = function (listener, after) {\n  return new Interval(listener, after);\n};\n\nexports.clearTimeout = function (timer) {\n  if (timer) timer.close();\n};\n\nexports.clearInterval = exports.clearTimeout;\nexports.Timeout = Timeout;\nexports.Interval = Interval;\n\nfunction Timeout(listener, after) {\n  this.listener = listener;\n  this.after = after;\n  this.unreffed = false;\n  this.start();\n}\n\nTimeout.prototype.unref = function () {\n  if (!this.unreffed) {\n    this.unreffed = true;\n    this.timeout.unref();\n  }\n};\n\nTimeout.prototype.ref = function () {\n  if (this.unreffed) {\n    this.unreffed = false;\n    this.timeout.ref();\n  }\n};\n\nTimeout.prototype.start = function () {\n  if (this.after <= TIMEOUT_MAX) {\n    this.timeout = setTimeout(this.listener, this.after);\n  } else {\n    var self = this;\n    this.timeout = setTimeout(function () {\n      self.after -= TIMEOUT_MAX;\n      self.start();\n    }, TIMEOUT_MAX);\n  }\n\n  if (this.unreffed) {\n    this.timeout.unref();\n  }\n};\n\nTimeout.prototype.close = function () {\n  clearTimeout(this.timeout);\n};\n\nfunction Interval(listener, after) {\n  this.listener = listener;\n  this.after = this.timeLeft = after;\n  this.unreffed = false;\n  this.start();\n}\n\nInterval.prototype.unref = function () {\n  if (!this.unreffed) {\n    this.unreffed = true;\n    this.timeout.unref();\n  }\n};\n\nInterval.prototype.ref = function () {\n  if (this.unreffed) {\n    this.unreffed = false;\n    this.timeout.ref();\n  }\n};\n\nInterval.prototype.start = function () {\n  var self = this;\n\n  if (this.timeLeft <= TIMEOUT_MAX) {\n    this.timeout = setTimeout(function () {\n      self.listener();\n      self.timeLeft = self.after;\n      self.start();\n    }, this.timeLeft);\n  } else {\n    this.timeout = setTimeout(function () {\n      self.timeLeft -= TIMEOUT_MAX;\n      self.start();\n    }, TIMEOUT_MAX);\n  }\n\n  if (this.unreffed) {\n    this.timeout.unref();\n  }\n};\n\nInterval.prototype.close = function () {\n  Timeout.prototype.close.apply(this, arguments);\n};","map":null,"metadata":{},"sourceType":"script"}