{"ast":null,"code":"'use strict';\n\nvar CronExpression = require('./expression');\n\nfunction CronParser() {}\n/**\n * Parse crontab entry\n *\n * @private\n * @param {String} entry Crontab file entry/line\n */\n\n\nCronParser._parseEntry = function _parseEntry(entry) {\n  var atoms = entry.split(' ');\n\n  if (atoms.length === 6) {\n    return {\n      interval: CronExpression.parse(entry)\n    };\n  } else if (atoms.length > 6) {\n    return {\n      interval: CronExpression.parse(atoms.slice(0, 6).join(' ')),\n      command: atoms.slice(6, atoms.length)\n    };\n  } else {\n    throw new Error('Invalid entry: ' + entry);\n  }\n};\n/**\n * Wrapper for CronExpression.parser method\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\n\n\nCronParser.parseExpression = function parseExpression(expression, options) {\n  return CronExpression.parse(expression, options);\n};\n/**\n * Wrapper for CronExpression.fieldsToExpression method\n *\n * @public\n * @param {Object} fields Input fields\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\n\n\nCronParser.fieldsToExpression = function fieldsToExpression(fields, options) {\n  return CronExpression.fieldsToExpression(fields, options);\n};\n/**\n * Parse content string\n *\n * @public\n * @param {String} data Crontab content\n * @return {Object}\n */\n\n\nCronParser.parseString = function parseString(data) {\n  var blocks = data.split('\\n');\n  var response = {\n    variables: {},\n    expressions: [],\n    errors: {}\n  };\n\n  for (var i = 0, c = blocks.length; i < c; i++) {\n    var block = blocks[i];\n    var matches = null;\n    var entry = block.trim(); // Remove surrounding spaces\n\n    if (entry.length > 0) {\n      if (entry.match(/^#/)) {\n        // Comment\n        continue;\n      } else if (matches = entry.match(/^(.*)=(.*)$/)) {\n        // Variable\n        response.variables[matches[1]] = matches[2];\n      } else {\n        // Expression?\n        var result = null;\n\n        try {\n          result = CronParser._parseEntry('0 ' + entry);\n          response.expressions.push(result.interval);\n        } catch (err) {\n          response.errors[entry] = err;\n        }\n      }\n    }\n  }\n\n  return response;\n};\n/**\n * Parse crontab file\n *\n * @public\n * @param {String} filePath Path to file\n * @param {Function} callback\n */\n\n\nCronParser.parseFile = function parseFile(filePath, callback) {\n  require('fs').readFile(filePath, function (err, data) {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    return callback(null, CronParser.parseString(data.toString()));\n  });\n};\n\nmodule.exports = CronParser;","map":null,"metadata":{},"sourceType":"script"}