{"ast":null,"code":"'use strict'; // Load Date class extensions\n\nvar CronDate = require('./date');\n\nvar stringifyField = require('./field_stringify');\n/**\n * Cron iteration loop safety limit\n */\n\n\nvar LOOP_LIMIT = 10000;\n/**\n * Construct a new expression parser\n *\n * Options:\n *   currentDate: iterator start date\n *   endDate: iterator end date\n *\n * @constructor\n * @private\n * @param {Object} fields  Expression fields parsed values\n * @param {Object} options Parser options\n */\n\nfunction CronExpression(fields, options) {\n  this._options = options;\n  this._utc = options.utc || false;\n  this._tz = this._utc ? 'UTC' : options.tz;\n  this._currentDate = new CronDate(options.currentDate, this._tz);\n  this._startDate = options.startDate ? new CronDate(options.startDate, this._tz) : null;\n  this._endDate = options.endDate ? new CronDate(options.endDate, this._tz) : null;\n  this._isIterator = options.iterator || false;\n  this._hasIterated = false;\n  this._nthDayOfWeek = options.nthDayOfWeek || 0;\n  this.fields = CronExpression._freezeFields(fields);\n}\n/**\n * Field mappings\n * @type {Array}\n */\n\n\nCronExpression.map = ['second', 'minute', 'hour', 'dayOfMonth', 'month', 'dayOfWeek'];\n/**\n * Prefined intervals\n * @type {Object}\n */\n\nCronExpression.predefined = {\n  '@yearly': '0 0 1 1 *',\n  '@monthly': '0 0 1 * *',\n  '@weekly': '0 0 * * 0',\n  '@daily': '0 0 * * *',\n  '@hourly': '0 * * * *'\n};\n/**\n * Fields constraints\n * @type {Array}\n */\n\nCronExpression.constraints = [{\n  min: 0,\n  max: 59,\n  chars: []\n}, // Second\n{\n  min: 0,\n  max: 59,\n  chars: []\n}, // Minute\n{\n  min: 0,\n  max: 23,\n  chars: []\n}, // Hour\n{\n  min: 1,\n  max: 31,\n  chars: ['L']\n}, // Day of month\n{\n  min: 1,\n  max: 12,\n  chars: []\n}, // Month\n{\n  min: 0,\n  max: 7,\n  chars: ['L']\n} // Day of week\n];\n/**\n * Days in month\n * @type {number[]}\n */\n\nCronExpression.daysInMonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n/**\n * Field aliases\n * @type {Object}\n */\n\nCronExpression.aliases = {\n  month: {\n    jan: 1,\n    feb: 2,\n    mar: 3,\n    apr: 4,\n    may: 5,\n    jun: 6,\n    jul: 7,\n    aug: 8,\n    sep: 9,\n    oct: 10,\n    nov: 11,\n    dec: 12\n  },\n  dayOfWeek: {\n    sun: 0,\n    mon: 1,\n    tue: 2,\n    wed: 3,\n    thu: 4,\n    fri: 5,\n    sat: 6\n  }\n};\n/**\n * Field defaults\n * @type {Array}\n */\n\nCronExpression.parseDefaults = ['0', '*', '*', '*', '*', '*'];\nCronExpression.standardValidCharacters = /^[,*\\d/-]+$/;\nCronExpression.dayOfWeekValidCharacters = /^[?,*\\dL#/-]+$/;\nCronExpression.dayOfMonthValidCharacters = /^[?,*\\dL/-]+$/;\nCronExpression.validCharacters = {\n  second: CronExpression.standardValidCharacters,\n  minute: CronExpression.standardValidCharacters,\n  hour: CronExpression.standardValidCharacters,\n  dayOfMonth: CronExpression.dayOfMonthValidCharacters,\n  month: CronExpression.standardValidCharacters,\n  dayOfWeek: CronExpression.dayOfWeekValidCharacters\n};\n\nCronExpression._isValidConstraintChar = function _isValidConstraintChar(constraints, value) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return constraints.chars.some(function (char) {\n    return value.indexOf(char) > -1;\n  });\n};\n/**\n * Parse input interval\n *\n * @param {String} field Field symbolic name\n * @param {String} value Field value\n * @param {Array} constraints Range upper and lower constraints\n * @return {Array} Sequence of sorted values\n * @private\n */\n\n\nCronExpression._parseField = function _parseField(field, value, constraints) {\n  // Replace aliases\n  switch (field) {\n    case 'month':\n    case 'dayOfWeek':\n      var aliases = CronExpression.aliases[field];\n      value = value.replace(/[a-z]{3}/gi, function (match) {\n        match = match.toLowerCase();\n\n        if (typeof aliases[match] !== 'undefined') {\n          return aliases[match];\n        } else {\n          throw new Error('Validation error, cannot resolve alias \"' + match + '\"');\n        }\n      });\n      break;\n  } // Check for valid characters.\n\n\n  if (!CronExpression.validCharacters[field].test(value)) {\n    throw new Error('Invalid characters, got value: ' + value);\n  } // Replace '*' and '?'\n\n\n  if (value.indexOf('*') !== -1) {\n    value = value.replace(/\\*/g, constraints.min + '-' + constraints.max);\n  } else if (value.indexOf('?') !== -1) {\n    value = value.replace(/\\?/g, constraints.min + '-' + constraints.max);\n  } //\n  // Inline parsing functions\n  //\n  // Parser path:\n  //  - parseSequence\n  //    - parseRepeat\n  //      - parseRange\n\n  /**\n   * Parse sequence\n   *\n   * @param {String} val\n   * @return {Array}\n   * @private\n   */\n\n\n  function parseSequence(val) {\n    var stack = [];\n\n    function handleResult(result) {\n      if (result instanceof Array) {\n        // Make sequence linear\n        for (var i = 0, c = result.length; i < c; i++) {\n          var value = result[i];\n\n          if (CronExpression._isValidConstraintChar(constraints, value)) {\n            stack.push(value);\n            continue;\n          } // Check constraints\n\n\n          if (typeof value !== 'number' || Number.isNaN(value) || value < constraints.min || value > constraints.max) {\n            throw new Error('Constraint error, got value ' + value + ' expected range ' + constraints.min + '-' + constraints.max);\n          }\n\n          stack.push(value);\n        }\n      } else {\n        // Scalar value\n        if (CronExpression._isValidConstraintChar(constraints, result)) {\n          stack.push(result);\n          return;\n        }\n\n        var numResult = +result; // Check constraints\n\n        if (Number.isNaN(numResult) || numResult < constraints.min || numResult > constraints.max) {\n          throw new Error('Constraint error, got value ' + result + ' expected range ' + constraints.min + '-' + constraints.max);\n        }\n\n        if (field === 'dayOfWeek') {\n          numResult = numResult % 7;\n        }\n\n        stack.push(numResult);\n      }\n    }\n\n    var atoms = val.split(',');\n\n    if (!atoms.every(function (atom) {\n      return atom.length > 0;\n    })) {\n      throw new Error('Invalid list value format');\n    }\n\n    if (atoms.length > 1) {\n      for (var i = 0, c = atoms.length; i < c; i++) {\n        handleResult(parseRepeat(atoms[i]));\n      }\n    } else {\n      handleResult(parseRepeat(val));\n    }\n\n    stack.sort(CronExpression._sortCompareFn);\n    return stack;\n  }\n  /**\n   * Parse repetition interval\n   *\n   * @param {String} val\n   * @return {Array}\n   */\n\n\n  function parseRepeat(val) {\n    var repeatInterval = 1;\n    var atoms = val.split('/');\n\n    if (atoms.length > 2) {\n      throw new Error('Invalid repeat: ' + val);\n    }\n\n    if (atoms.length > 1) {\n      if (atoms[0] == +atoms[0]) {\n        atoms = [atoms[0] + '-' + constraints.max, atoms[1]];\n      }\n\n      return parseRange(atoms[0], atoms[atoms.length - 1]);\n    }\n\n    return parseRange(val, repeatInterval);\n  }\n  /**\n   * Parse range\n   *\n   * @param {String} val\n   * @param {Number} repeatInterval Repetition interval\n   * @return {Array}\n   * @private\n   */\n\n\n  function parseRange(val, repeatInterval) {\n    var stack = [];\n    var atoms = val.split('-');\n\n    if (atoms.length > 1) {\n      // Invalid range, return value\n      if (atoms.length < 2) {\n        return +val;\n      }\n\n      if (!atoms[0].length) {\n        if (!atoms[1].length) {\n          throw new Error('Invalid range: ' + val);\n        }\n\n        return +val;\n      } // Validate range\n\n\n      var min = +atoms[0];\n      var max = +atoms[1];\n\n      if (Number.isNaN(min) || Number.isNaN(max) || min < constraints.min || max > constraints.max) {\n        throw new Error('Constraint error, got range ' + min + '-' + max + ' expected range ' + constraints.min + '-' + constraints.max);\n      } else if (min > max) {\n        throw new Error('Invalid range: ' + val);\n      } // Create range\n\n\n      var repeatIndex = +repeatInterval;\n\n      if (Number.isNaN(repeatIndex) || repeatIndex <= 0) {\n        throw new Error('Constraint error, cannot repeat at every ' + repeatIndex + ' time.');\n      } // JS DOW is in range of 0-6 (SUN-SAT) but we also support 7 in the expression\n      // Handle case when range contains 7 instead of 0 and translate this value to 0\n\n\n      if (field === 'dayOfWeek' && max % 7 === 0) {\n        stack.push(0);\n      }\n\n      for (var index = min, count = max; index <= count; index++) {\n        var exists = stack.indexOf(index) !== -1;\n\n        if (!exists && repeatIndex > 0 && repeatIndex % repeatInterval === 0) {\n          repeatIndex = 1;\n          stack.push(index);\n        } else {\n          repeatIndex++;\n        }\n      }\n\n      return stack;\n    }\n\n    return Number.isNaN(+val) ? val : +val;\n  }\n\n  return parseSequence(value);\n};\n\nCronExpression._sortCompareFn = function (a, b) {\n  var aIsNumber = typeof a === 'number';\n  var bIsNumber = typeof b === 'number';\n\n  if (aIsNumber && bIsNumber) {\n    return a - b;\n  }\n\n  if (!aIsNumber && bIsNumber) {\n    return 1;\n  }\n\n  if (aIsNumber && !bIsNumber) {\n    return -1;\n  }\n\n  return a.localeCompare(b);\n};\n\nCronExpression._handleMaxDaysInMonth = function (mappedFields) {\n  // Filter out any day of month value that is larger than given month expects\n  if (mappedFields.month.length === 1) {\n    var daysInMonth = CronExpression.daysInMonth[mappedFields.month[0] - 1];\n\n    if (mappedFields.dayOfMonth[0] > daysInMonth) {\n      throw new Error('Invalid explicit day of month definition');\n    }\n\n    return mappedFields.dayOfMonth.filter(function (dayOfMonth) {\n      return dayOfMonth === 'L' ? true : dayOfMonth <= daysInMonth;\n    }).sort(CronExpression._sortCompareFn);\n  }\n};\n\nCronExpression._freezeFields = function (fields) {\n  for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i]; // Field name\n\n    var value = fields[field];\n    fields[field] = Object.freeze(value);\n  }\n\n  return Object.freeze(fields);\n};\n\nCronExpression.prototype._applyTimezoneShift = function (currentDate, dateMathVerb, method) {\n  if (method === 'Month' || method === 'Day') {\n    var prevTime = currentDate.getTime();\n    currentDate[dateMathVerb + method]();\n    var currTime = currentDate.getTime();\n\n    if (prevTime === currTime) {\n      // Jumped into a not existent date due to a DST transition\n      if (currentDate.getMinutes() === 0 && currentDate.getSeconds() === 0) {\n        currentDate.addHour();\n      } else if (currentDate.getMinutes() === 59 && currentDate.getSeconds() === 59) {\n        currentDate.subtractHour();\n      }\n    }\n  } else {\n    var previousHour = currentDate.getHours();\n    currentDate[dateMathVerb + method]();\n    var currentHour = currentDate.getHours();\n    var diff = currentHour - previousHour;\n\n    if (diff === 2) {\n      // Starting DST\n      if (this.fields.hour.length !== 24) {\n        // Hour is specified\n        this._dstStart = currentHour;\n      }\n    } else if (diff === 0 && currentDate.getMinutes() === 0 && currentDate.getSeconds() === 0) {\n      // Ending DST\n      if (this.fields.hour.length !== 24) {\n        // Hour is specified\n        this._dstEnd = currentHour;\n      }\n    }\n  }\n};\n/**\n * Find next or previous matching schedule date\n *\n * @return {CronDate}\n * @private\n */\n\n\nCronExpression.prototype._findSchedule = function _findSchedule(reverse) {\n  /**\n   * Match field value\n   *\n   * @param {String} value\n   * @param {Array} sequence\n   * @return {Boolean}\n   * @private\n   */\n  function matchSchedule(value, sequence) {\n    for (var i = 0, c = sequence.length; i < c; i++) {\n      if (sequence[i] >= value) {\n        return sequence[i] === value;\n      }\n    }\n\n    return sequence[0] === value;\n  }\n  /**\n   * Helps determine if the provided date is the correct nth occurence of the\n   * desired day of week.\n   *\n   * @param {CronDate} date\n   * @param {Number} nthDayOfWeek\n   * @return {Boolean}\n   * @private\n   */\n\n\n  function isNthDayMatch(date, nthDayOfWeek) {\n    if (nthDayOfWeek < 6) {\n      if (date.getDate() < 8 && nthDayOfWeek === 1 // First occurence has to happen in first 7 days of the month\n      ) {\n        return true;\n      }\n\n      var offset = date.getDate() % 7 ? 1 : 0; // Math is off by 1 when dayOfWeek isn't divisible by 7\n\n      var adjustedDate = date.getDate() - date.getDate() % 7; // find the first occurance\n\n      var occurrence = Math.floor(adjustedDate / 7) + offset;\n      return occurrence === nthDayOfWeek;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function that checks if 'L' is in the array\n   *\n   * @param {Array} expressions\n   */\n\n\n  function isLInExpressions(expressions) {\n    return expressions.length > 0 && expressions.some(function (expression) {\n      return typeof expression === 'string' && expression.indexOf('L') >= 0;\n    });\n  } // Whether to use backwards directionality when searching\n\n\n  reverse = reverse || false;\n  var dateMathVerb = reverse ? 'subtract' : 'add';\n  var currentDate = new CronDate(this._currentDate, this._tz);\n  var startDate = this._startDate;\n  var endDate = this._endDate; // Find matching schedule\n\n  var startTimestamp = currentDate.getTime();\n  var stepCount = 0;\n\n  function isLastWeekdayOfMonthMatch(expressions) {\n    return expressions.some(function (expression) {\n      // There might be multiple expressions and not all of them will contain\n      // the \"L\".\n      if (!isLInExpressions([expression])) {\n        return false;\n      } // The first character represents the weekday\n\n\n      var weekday = Number.parseInt(expression[0]) % 7;\n\n      if (Number.isNaN(weekday)) {\n        throw new Error('Invalid last weekday of the month expression: ' + expression);\n      }\n\n      return currentDate.getDay() === weekday && currentDate.isLastWeekdayOfMonth();\n    });\n  }\n\n  while (stepCount < LOOP_LIMIT) {\n    stepCount++; // Validate timespan\n\n    if (reverse) {\n      if (startDate && currentDate.getTime() - startDate.getTime() < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    } else {\n      if (endDate && endDate.getTime() - currentDate.getTime() < 0) {\n        throw new Error('Out of the timespan range');\n      }\n    } // Day of month and week matching:\n    //\n    // \"The day of a command's execution can be specified by two fields --\n    // day of month, and day of week.  If  both\t fields\t are  restricted  (ie,\n    // aren't  *),  the command will be run when either field matches the cur-\n    // rent time.  For example, \"30 4 1,15 * 5\" would cause a command to be\n    // run at 4:30 am on the  1st and 15th of each month, plus every Friday.\"\n    //\n    // http://unixhelp.ed.ac.uk/CGI/man-cgi?crontab+5\n    //\n\n\n    var dayOfMonthMatch = matchSchedule(currentDate.getDate(), this.fields.dayOfMonth);\n\n    if (isLInExpressions(this.fields.dayOfMonth)) {\n      dayOfMonthMatch = dayOfMonthMatch || currentDate.isLastDayOfMonth();\n    }\n\n    var dayOfWeekMatch = matchSchedule(currentDate.getDay(), this.fields.dayOfWeek);\n\n    if (isLInExpressions(this.fields.dayOfWeek)) {\n      dayOfWeekMatch = dayOfWeekMatch || isLastWeekdayOfMonthMatch(this.fields.dayOfWeek);\n    }\n\n    var isDayOfMonthWildcardMatch = this.fields.dayOfMonth.length >= CronExpression.daysInMonth[currentDate.getMonth()];\n    var isDayOfWeekWildcardMatch = this.fields.dayOfWeek.length === CronExpression.constraints[5].max - CronExpression.constraints[5].min + 1;\n    var currentHour = currentDate.getHours(); // Add or subtract day if select day not match with month (according to calendar)\n\n    if (!dayOfMonthMatch && (!dayOfWeekMatch || isDayOfWeekWildcardMatch)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if not day of month is set (and no match) and day of week is wildcard\n\n\n    if (!isDayOfMonthWildcardMatch && isDayOfWeekWildcardMatch && !dayOfMonthMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if not day of week is set (and no match) and day of month is wildcard\n\n\n    if (isDayOfMonthWildcardMatch && !isDayOfWeekWildcardMatch && !dayOfWeekMatch) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Add or subtract day if day of week & nthDayOfWeek are set (and no match)\n\n\n    if (this._nthDayOfWeek > 0 && !isNthDayMatch(currentDate, this._nthDayOfWeek)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Day');\n\n      continue;\n    } // Match month\n\n\n    if (!matchSchedule(currentDate.getMonth() + 1, this.fields.month)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Month');\n\n      continue;\n    } // Match hour\n\n\n    if (!matchSchedule(currentHour, this.fields.hour)) {\n      if (this._dstStart !== currentHour) {\n        this._dstStart = null;\n\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Hour');\n\n        continue;\n      } else if (!matchSchedule(currentHour - 1, this.fields.hour)) {\n        currentDate[dateMathVerb + 'Hour']();\n        continue;\n      }\n    } else if (this._dstEnd === currentHour) {\n      if (!reverse) {\n        this._dstEnd = null;\n\n        this._applyTimezoneShift(currentDate, 'add', 'Hour');\n\n        continue;\n      }\n    } // Match minute\n\n\n    if (!matchSchedule(currentDate.getMinutes(), this.fields.minute)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Minute');\n\n      continue;\n    } // Match second\n\n\n    if (!matchSchedule(currentDate.getSeconds(), this.fields.second)) {\n      this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n\n      continue;\n    } // Increase a second in case in the first iteration the currentDate was not\n    // modified\n\n\n    if (startTimestamp === currentDate.getTime()) {\n      if (dateMathVerb === 'add' || currentDate.getMilliseconds() === 0) {\n        this._applyTimezoneShift(currentDate, dateMathVerb, 'Second');\n      } else {\n        currentDate.setMilliseconds(0);\n      }\n\n      continue;\n    }\n\n    break;\n  }\n\n  if (stepCount >= LOOP_LIMIT) {\n    throw new Error('Invalid expression, loop limit exceeded');\n  }\n\n  this._currentDate = new CronDate(currentDate, this._tz);\n  this._hasIterated = true;\n  return currentDate;\n};\n/**\n * Find next suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\n\n\nCronExpression.prototype.next = function next() {\n  var schedule = this._findSchedule(); // Try to return ES6 compatible iterator\n\n\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasNext()\n    };\n  }\n\n  return schedule;\n};\n/**\n * Find previous suitable date\n *\n * @public\n * @return {CronDate|Object}\n */\n\n\nCronExpression.prototype.prev = function prev() {\n  var schedule = this._findSchedule(true); // Try to return ES6 compatible iterator\n\n\n  if (this._isIterator) {\n    return {\n      value: schedule,\n      done: !this.hasPrev()\n    };\n  }\n\n  return schedule;\n};\n/**\n * Check if next suitable date exists\n *\n * @public\n * @return {Boolean}\n */\n\n\nCronExpression.prototype.hasNext = function () {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule();\n\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n/**\n * Check if previous suitable date exists\n *\n * @public\n * @return {Boolean}\n */\n\n\nCronExpression.prototype.hasPrev = function () {\n  var current = this._currentDate;\n  var hasIterated = this._hasIterated;\n\n  try {\n    this._findSchedule(true);\n\n    return true;\n  } catch (err) {\n    return false;\n  } finally {\n    this._currentDate = current;\n    this._hasIterated = hasIterated;\n  }\n};\n/**\n * Iterate over expression iterator\n *\n * @public\n * @param {Number} steps Numbers of steps to iterate\n * @param {Function} callback Optional callback\n * @return {Array} Array of the iterated results\n */\n\n\nCronExpression.prototype.iterate = function iterate(steps, callback) {\n  var dates = [];\n\n  if (steps >= 0) {\n    for (var i = 0, c = steps; i < c; i++) {\n      try {\n        var item = this.next();\n        dates.push(item); // Fire the callback\n\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  } else {\n    for (var i = 0, c = steps; i > c; i--) {\n      try {\n        var item = this.prev();\n        dates.push(item); // Fire the callback\n\n        if (callback) {\n          callback(item, i);\n        }\n      } catch (err) {\n        break;\n      }\n    }\n  }\n\n  return dates;\n};\n/**\n * Reset expression iterator state\n *\n * @public\n */\n\n\nCronExpression.prototype.reset = function reset(newDate) {\n  this._currentDate = new CronDate(newDate || this._options.currentDate);\n};\n/**\n * Stringify the expression\n *\n * @public\n * @param {Boolean} [includeSeconds] Should stringify seconds\n * @return {String}\n */\n\n\nCronExpression.prototype.stringify = function stringify(includeSeconds) {\n  var resultArr = [];\n\n  for (var i = includeSeconds ? 0 : 1, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i];\n    var value = this.fields[field];\n    var constraint = CronExpression.constraints[i];\n\n    if (field === 'dayOfMonth' && this.fields.month.length === 1) {\n      constraint = {\n        min: 1,\n        max: CronExpression.daysInMonth[this.fields.month[0] - 1]\n      };\n    } else if (field === 'dayOfWeek') {\n      // Prefer 0-6 range when serializing day of week field\n      constraint = {\n        min: 0,\n        max: 6\n      };\n      value = value[value.length - 1] === 7 ? value.slice(0, -1) : value;\n    }\n\n    resultArr.push(stringifyField(value, constraint.min, constraint.max));\n  }\n\n  return resultArr.join(' ');\n};\n/**\n * Parse input expression (async)\n *\n * @public\n * @param {String} expression Input expression\n * @param {Object} [options] Parsing options\n */\n\n\nCronExpression.parse = function parse(expression, options) {\n  var self = this;\n\n  if (typeof options === 'function') {\n    options = {};\n  }\n\n  function parse(expression, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof options.currentDate === 'undefined') {\n      options.currentDate = new CronDate(undefined, self._tz);\n    } // Is input expression predefined?\n\n\n    if (CronExpression.predefined[expression]) {\n      expression = CronExpression.predefined[expression];\n    } // Split fields\n\n\n    var fields = [];\n    var atoms = (expression + '').trim().split(/\\s+/);\n\n    if (atoms.length > 6) {\n      throw new Error('Invalid cron expression');\n    } // Resolve fields\n\n\n    var start = CronExpression.map.length - atoms.length;\n\n    for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n      var field = CronExpression.map[i]; // Field name\n\n      var value = atoms[atoms.length > c ? i : i - start]; // Field value\n\n      if (i < start || !value) {\n        // Use default value\n        fields.push(CronExpression._parseField(field, CronExpression.parseDefaults[i], CronExpression.constraints[i]));\n      } else {\n        var val = field === 'dayOfWeek' ? parseNthDay(value) : value;\n        fields.push(CronExpression._parseField(field, val, CronExpression.constraints[i]));\n      }\n    }\n\n    var mappedFields = {};\n\n    for (var i = 0, c = CronExpression.map.length; i < c; i++) {\n      var key = CronExpression.map[i];\n      mappedFields[key] = fields[i];\n    }\n\n    var dayOfMonth = CronExpression._handleMaxDaysInMonth(mappedFields);\n\n    mappedFields.dayOfMonth = dayOfMonth || mappedFields.dayOfMonth;\n    return new CronExpression(mappedFields, options);\n    /**\n     * Parses out the # special character for the dayOfWeek field & adds it to options.\n     *\n     * @param {String} val\n     * @return {String}\n     * @private\n     */\n\n    function parseNthDay(val) {\n      var atoms = val.split('#');\n\n      if (atoms.length > 1) {\n        var nthValue = +atoms[atoms.length - 1];\n\n        if (/,/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `,` ' + 'special characters are incompatible');\n        }\n\n        if (/\\//.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `/` ' + 'special characters are incompatible');\n        }\n\n        if (/-/.test(val)) {\n          throw new Error('Constraint error, invalid dayOfWeek `#` and `-` ' + 'special characters are incompatible');\n        }\n\n        if (atoms.length > 2 || Number.isNaN(nthValue) || nthValue < 1 || nthValue > 5) {\n          throw new Error('Constraint error, invalid dayOfWeek occurrence number (#)');\n        }\n\n        options.nthDayOfWeek = nthValue;\n        return atoms[0];\n      }\n\n      return val;\n    }\n  }\n\n  return parse(expression, options);\n};\n/**\n * Convert cron fields back to Cron Expression\n *\n * @public\n * @param {Object} fields Input fields\n * @param {Object} [options] Parsing options\n * @return {Object}\n */\n\n\nCronExpression.fieldsToExpression = function fieldsToExpression(fields, options) {\n  function validateConstraints(field, values, constraints) {\n    if (!values) {\n      throw new Error('Validation error, Field ' + field + ' is missing');\n    }\n\n    if (values.length === 0) {\n      throw new Error('Validation error, Field ' + field + ' contains no values');\n    }\n\n    for (var i = 0, c = values.length; i < c; i++) {\n      var value = values[i];\n\n      if (CronExpression._isValidConstraintChar(constraints, value)) {\n        continue;\n      } // Check constraints\n\n\n      if (typeof value !== 'number' || Number.isNaN(value) || value < constraints.min || value > constraints.max) {\n        throw new Error('Constraint error, got value ' + value + ' expected range ' + constraints.min + '-' + constraints.max);\n      }\n    }\n  }\n\n  var mappedFields = {};\n\n  for (var i = 0, c = CronExpression.map.length; i < c; ++i) {\n    var field = CronExpression.map[i]; // Field name\n\n    var values = fields[field];\n    validateConstraints(field, values, CronExpression.constraints[i]);\n    var copy = [];\n    var j = -1;\n\n    while (++j < values.length) {\n      copy[j] = values[j];\n    }\n\n    values = copy.sort(CronExpression._sortCompareFn).filter(function (item, pos, ary) {\n      return !pos || item !== ary[pos - 1];\n    });\n\n    if (values.length !== copy.length) {\n      throw new Error('Validation error, Field ' + field + ' contains duplicate values');\n    }\n\n    mappedFields[field] = values;\n  }\n\n  var dayOfMonth = CronExpression._handleMaxDaysInMonth(mappedFields);\n\n  mappedFields.dayOfMonth = dayOfMonth || mappedFields.dayOfMonth;\n  return new CronExpression(mappedFields, options || {});\n};\n\nmodule.exports = CronExpression;","map":null,"metadata":{},"sourceType":"script"}